{"version":3,"sources":["../node_modules/@capacitor-mlkit/barcode-scanning/dist/esm/web.js"],"names":["__webpack_require__","r","__webpack_exports__","d","BarcodeScannerWeb","_capacitor_core__WEBPACK_IMPORTED_MODULE_0__","_definitions__WEBPACK_IMPORTED_MODULE_1__","[object Object]","super","arguments","this","_isSupported","window","errorVideoElementMissing","eventBarcodesScanned","options","createUnavailableException","videoElement","Error","stream","navigator","mediaDevices","getUserMedia","video","facingMode","ideal","lensFacing","Front","audio","srcObject","play","barcodeDetector","BarcodeDetector","intervalId","setInterval","async","barcodes","detect","length","handleScannedBarcodes","clearInterval","undefined","getTracks","forEach","track","stop","_options","supported","camera","permissions","query","name","state","error","Unavailable","result","map","barcode","cornerPoints","x","y","displayValue","rawValue","format","toUpperCase","valueType","Unknown","notifyListeners"],"mappings":"yFAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,sCAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAEO,MAAAI,UAAgCC,EAAA,EACvCE,cACAC,SAAAC,WACAC,KAAAC,aAAA,oBAAAC,OACAF,KAAAG,yBAAA,iCACAH,KAAAI,qBAAA,kBAEAP,gBAAAQ,GACA,IAAAL,KAAAC,aACA,MAAAD,KAAAM,6BAEA,YAAAD,QAAA,IAAAA,OAAA,EAAAA,EAAAE,cACA,UAAAC,MAAAR,KAAAG,0BAEAH,KAAAO,aAAAF,EAAAE,aACAP,KAAAS,aAAAC,UAAAC,aAAAC,aAAA,CACAC,MAAA,CACAC,WAAA,CACAC,OAAA,OAAAV,QAAA,IAAAA,OAAA,EAAAA,EAAAW,cAA4FpB,EAAA,EAAUqB,MAAA,uBAGtGC,OAAA,IAEAb,EAAAE,aAAAY,UAAAnB,KAAAS,aACAJ,EAAAE,aAAAa,OACA,MAAAC,EAAA,IAAAC,gBACAtB,KAAAuB,WAAArB,OAAAsB,YAAAC,UACA,IAAApB,EAAAE,aACA,OAEA,MAAAmB,QAAAL,EAAAM,OAAAtB,EAAAE,cACA,IAAAmB,EAAAE,QAGA5B,KAAA6B,sBAAAH,IAEK,KAEL7B,iBACA,IAAAG,KAAAC,aACA,MAAAD,KAAAM,6BAEAN,KAAAuB,aACAO,cAAA9B,KAAAuB,YACAvB,KAAAuB,gBAAAQ,GAEA/B,KAAAS,SACAT,KAAAS,OAAAuB,YAAAC,QAAAC,KAAAC,QACAnC,KAAAS,YAAAsB,GAEA/B,KAAAO,eACAP,KAAAO,aAAAY,UAAA,KACAnB,KAAAO,kBAAAwB,GAGAlC,4BAAAuC,GACA,MAAApC,KAAAM,6BAEAT,aACA,MAAAG,KAAAM,6BAEAT,oBACA,OACAwC,UAAArC,KAAAC,cAGAJ,mBAAAuC,GACA,MAAApC,KAAAM,6BAEAT,qBACA,MAAAG,KAAAM,6BAEAT,wBACA,MAAAG,KAAAM,6BAEAT,wBACA,MAAAG,KAAAM,6BAEAT,qBACA,MAAAG,KAAAM,6BAEAT,8CACA,MAAAG,KAAAM,6BAEAT,0CACA,MAAAG,KAAAM,6BAEAT,yBACA,IAIA,OACAyC,cAJA5B,UAAA6B,YAAAC,MAAA,CACAC,KAAA,YAGAC,OAEK,MAAAC,GACL,OACAL,OAAA,WAIAzC,2BACA,IAKA,aAJAa,UAAAC,aAAAC,aAAA,CACAC,OAAA,KAEAmB,YAAAC,QAAAC,KAAAC,QACA,CACAG,OAAA,WAEK,MAAAK,GACL,OACAL,OAAA,WAIAzC,6BACA,WAAeF,EAAA,EAAkB,wDAA0DA,EAAA,EAAaiD,aAExG/C,sBAAA6B,GACA,MAAAmB,EAAA,CACAnB,WAAAoB,IAAAC,IAAA,CACAC,aAAA,EAAAD,EAAAC,aAAA,GAAAC,EAAAF,EAAAC,aAAA,GAAAE,GAAA,CAAAH,EAAAC,aAAA,GAAAC,EAAAF,EAAAC,aAAA,GAAAE,GAAA,CAAAH,EAAAC,aAAA,GAAAC,EAAAF,EAAAC,aAAA,GAAAE,GAAA,CAAAH,EAAAC,aAAA,GAAAC,EAAAF,EAAAC,aAAA,GAAAE,IACAC,aAAAJ,EAAAK,SACAA,SAAAL,EAAAK,SACAC,OAAAN,EAAAM,OAAAC,cACAC,UAAmB3D,EAAA,EAAgB4D,YAGnCxD,KAAAyD,gBAAAzD,KAAAI,qBAAAyC","file":"static/js/3.75cbd150.chunk.js","sourcesContent":["import { CapacitorException, ExceptionCode, WebPlugin } from '@capacitor/core';\nimport { BarcodeValueType, LensFacing } from './definitions';\nexport class BarcodeScannerWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this._isSupported = 'BarcodeDetector' in window;\n    this.errorVideoElementMissing = 'videoElement must be provided.';\n    this.eventBarcodesScanned = 'barcodesScanned';\n  }\n  async startScan(options) {\n    if (!this._isSupported) {\n      throw this.createUnavailableException();\n    }\n    if (!(options === null || options === void 0 ? void 0 : options.videoElement)) {\n      throw new Error(this.errorVideoElementMissing);\n    }\n    this.videoElement = options.videoElement;\n    this.stream = await navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: {\n          ideal: (options === null || options === void 0 ? void 0 : options.lensFacing) === LensFacing.Front ? 'user' : 'environment'\n        }\n      },\n      audio: false\n    });\n    options.videoElement.srcObject = this.stream;\n    await options.videoElement.play();\n    const barcodeDetector = new BarcodeDetector();\n    this.intervalId = window.setInterval(async () => {\n      if (!options.videoElement) {\n        return;\n      }\n      const barcodes = await barcodeDetector.detect(options.videoElement);\n      if (barcodes.length === 0) {\n        return;\n      } else {\n        this.handleScannedBarcodes(barcodes);\n      }\n    }, 500);\n  }\n  async stopScan() {\n    if (!this._isSupported) {\n      throw this.createUnavailableException();\n    }\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = undefined;\n    }\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n      this.stream = undefined;\n    }\n    if (this.videoElement) {\n      this.videoElement.srcObject = null;\n      this.videoElement = undefined;\n    }\n  }\n  async readBarcodesFromImage(_options) {\n    throw this.createUnavailableException();\n  }\n  async scan() {\n    throw this.createUnavailableException();\n  }\n  async isSupported() {\n    return {\n      supported: this._isSupported\n    };\n  }\n  async setZoomRatio(_options) {\n    throw this.createUnavailableException();\n  }\n  async getZoomRatio() {\n    throw this.createUnavailableException();\n  }\n  async getMinZoomRatio() {\n    throw this.createUnavailableException();\n  }\n  async getMaxZoomRatio() {\n    throw this.createUnavailableException();\n  }\n  async openSettings() {\n    throw this.createUnavailableException();\n  }\n  async isGoogleBarcodeScannerModuleAvailable() {\n    throw this.createUnavailableException();\n  }\n  async installGoogleBarcodeScannerModule() {\n    throw this.createUnavailableException();\n  }\n  async checkPermissions() {\n    try {\n      const result = await navigator.permissions.query({\n        name: 'camera'\n      });\n      return {\n        camera: result.state\n      };\n    } catch (error) {\n      return {\n        camera: 'prompt'\n      };\n    }\n  }\n  async requestPermissions() {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      stream.getTracks().forEach(track => track.stop());\n      return {\n        camera: 'granted'\n      };\n    } catch (error) {\n      return {\n        camera: 'denied'\n      };\n    }\n  }\n  createUnavailableException() {\n    return new CapacitorException('This plugin method is not available on this platform.', ExceptionCode.Unavailable);\n  }\n  handleScannedBarcodes(barcodes) {\n    const result = {\n      barcodes: barcodes.map(barcode => ({\n        cornerPoints: [[barcode.cornerPoints[0].x, barcode.cornerPoints[0].y], [barcode.cornerPoints[1].x, barcode.cornerPoints[1].y], [barcode.cornerPoints[2].x, barcode.cornerPoints[2].y], [barcode.cornerPoints[3].x, barcode.cornerPoints[3].y]],\n        displayValue: barcode.rawValue,\n        rawValue: barcode.rawValue,\n        format: barcode.format.toUpperCase(),\n        valueType: BarcodeValueType.Unknown\n      }))\n    };\n    this.notifyListeners(this.eventBarcodesScanned, result);\n  }\n}"],"sourceRoot":""}